CONN_MAP	input.c	/^typedef std::map<DWORD,CONN_DATA*>	CONN_MAP;$/
EVENTFUNC	input.c	/^EVENTFUNC(conn_event_func)$/
FAIL_EXIT	config.c	/^	\/\/ check arg$/
LOGFILE	log.c	/^typedef struct log_file_s	LOGFILE;$/
LPLOGFILE	log.c	/^typedef struct log_file_s*	LPLOGFILE;$/
Mmain	main.c	/^int main(int argc, char **argv)$/
TELL_CHILD	tellwait.c	/^void TELL_CHILD(pid_t pid)$/
TELL_PARENT	tellwait.c	/^void TELL_PARENT(pid_t pid)$/
TELL_WAIT	tellwait.c	/^void TELL_WAIT()$/
WAIT_CHILD	tellwait.c	/^void WAIT_CHILD(void)$/
WAIT_PARENT	tellwait.c	/^void WAIT_PARENT(void)$/
__online_hour	input.c	/^int __online_hour(CONN_DATA *conn)$/
__send_notice	mhh.c	/^__send_notice(conn, state)$/
_sql_error	libsql.c	/^void _sql_error(SQL * sql, const char *file, const/
_sys_err	log.c	/^void _sys_err(const char *func, int line, const ch/
account_login	sql_account.c	/^int account_login(DWORD account_id, CONN_DATA *con/
account_logout	sql_account.c	/^int account_logout(CONN_DATA *conn)$/
assign_state	socket.c	/^void assign_state(DESC_DATA * d, int state)$/
checkpointing	signal.c	/^RETSIGTYPE checkpointing(int sig)$/
clean_server	main.c	/^void clean_server()$/
conn_delete	input.c	/^void conn_delete(DWORD account_id)$/
conn_delete_by_desc	input.c	/^void conn_delete_by_desc(DESC_DATA *d)$/
conn_event_info	input.c	/^struct conn_event_info$/
conn_find	input.c	/^CONN_DATA *conn_find(DWORD account_id)$/
conn_insert	input.c	/^CONN_DATA* conn_insert(DESC_DATA *d, DWORD account/
encode_2bytes	socket.c	/^const char *encode_2bytes(sh_int ind)$/
encode_4bytes	socket.c	/^const char *encode_4bytes(int ind)$/
encode_byte	socket.c	/^const char *encode_byte(char ind)$/
event_cancel	event.c	/^void event_cancel(LPEVENT event)$/
event_create_ex	event.c	/^LPEVENT event_create_ex(EVENTFUNC(*func), void *ev/
event_destroy	event.c	/^void event_destroy()$/
event_init	event.c	/^void event_init(void)$/
event_process	event.c	/^void event_process(void)$/
event_reset_time	event.c	/^void event_reset_time(LPEVENT event, long when)$/
event_time	event.c	/^long event_time(LPEVENT event)$/
fetch_from_q	socket.c	/^int fetch_from_q(struct data_q *dest, char *data, /
filesize	utils.c	/^int filesize(FILE *fp)$/
flush_queues	socket.c	/^void flush_queues(struct data_q *queue)$/
get_from_q	socket.c	/^int get_from_q(struct data_q *dest, char *str, WOR/
gzlog_rotate	libsql.c	/^static void gzlog_rotate(const char *basename, int/
heartbeat	main.c	/^void heartbeat(int pulse)$/
hupsig	signal.c	/^RETSIGTYPE hupsig(int sig)$/
increase_online_time	mhh.c	/^	increase_online_time()$/
init_config	config.c	/^void init_config(void)$/
init_descriptor	socket.c	/^void init_descriptor(DESC_DATA *newd, socket_t des/
input_handshake	input.c	/^int input_handshake(DESC_DATA *d, char *orig, int /
input_login	input.c	/^int input_login(DESC_DATA *d, const char *data, in/
input_logout	input.c	/^int input_logout(DESC_DATA *d, const char *data, i/
input_main	input.c	/^int input_main(DESC_DATA *d, char *orig, int bytes/
ishprint	utils.c	/^#define ishprint(x)     ((((x) & 0xE0) > 0x90) || /
log_destroy	log.c	/^void log_destroy(void)$/
log_file_check	log.c	/^void log_file_check(LPLOGFILE logfile)$/
log_file_delete_old	log.c	/^void log_file_delete_old(const char *filename)$/
log_file_destroy	log.c	/^void log_file_destroy(LPLOGFILE logfile)$/
log_file_init	log.c	/^LPLOGFILE log_file_init(const char* filename, cons/
log_file_rotate	log.c	/^void log_file_rotate(LPLOGFILE logfile)$/
log_file_s	log.c	/^struct log_file_s$/
log_file_set_dir	log.c	/^void log_file_set_dir(const char *dir)$/
log_init	log.c	/^void log_init(void)$/
log_rotate	log.c	/^void log_rotate(void)$/
lower_string	utils.c	/^void lower_string(char *src, char *dest, int len)$/
new_descriptor	socket.c	/^int new_descriptor(int s)$/
packet	socket.c	/^void packet(PACKET_DATA *buffer, const void *data,/
packet_force_logout	input.c	/^void packet_force_logout(DESC_DATA *desc, CONN_DAT/
packet_free	socket.c	/^void packet_free(PACKET_DATA *buffer)$/
packet_header	input.c	/^void packet_header(PACKET_DATA *buf, BYTE header, /
packet_init	socket.c	/^void packet_init(PACKET_DATA *buffer)$/
packet_login_notice	input.c	/^void packet_login_notice(CONN_DATA *conn)$/
packet_teen_notice	input.c	/^void packet_teen_notice(CONN_DATA *conn, int hour)/
parse_token	utils.c	/^void parse_token(char *src, char *token, char *val/
perform_socket_read	socket.c	/^ssize_t perform_socket_read(socket_t desc, char *r/
pid_deinit	main.c	/^void pid_deinit(void)$/
pid_init	main.c	/^void pid_init(void)$/
printdata	utils.c	/^void printdata(unsigned char *data, int bytes)$/
process_command	main.c	/^void process_command(void)$/
process_input	main.c	/^int process_input(DESC_DATA * t)$/
process_output	main.c	/^int process_output(DESC_DATA * d)$/
pt_log	log.c	/^void pt_log(const char *format, ...)$/
queue_count	priority_queue.c	/^int queue_count(PRIORITY_QUEUE *q)$/
queue_deq	priority_queue.c	/^void queue_deq(PRIORITY_QUEUE *q, PRIORITY_Q_ELEME/
queue_elmt_key	priority_queue.c	/^int queue_elmt_key(PRIORITY_Q_ELEMENT *qe)$/
queue_enq	priority_queue.c	/^PRIORITY_Q_ELEMENT *queue_enq(PRIORITY_QUEUE *q, v/
queue_free	priority_queue.c	/^void queue_free(PRIORITY_QUEUE *q)$/
queue_head	priority_queue.c	/^void *queue_head(PRIORITY_QUEUE *q)$/
queue_init	priority_queue.c	/^PRIORITY_QUEUE *queue_init(void)$/
queue_key	priority_queue.c	/^int queue_key(PRIORITY_QUEUE *q)$/
queue_reque	priority_queue.c	/^PRIORITY_Q_ELEMENT *queue_reque(PRIORITY_QUEUE *q,/
reap	signal.c	/^RETSIGTYPE reap(int sig)$/
send_force_logout	input.c	/^void send_force_logout(CONN_DATA *conn)$/
send_login_notice	input.c	/^void send_login_notice(CONN_DATA *conn)$/
send_notice	input.c	/^void send_notice(CONN_DATA *conn)$/
server_loop	main.c	/^void server_loop(void)$/
shutdown_server	main.c	/^void shutdown_server()$/
sig_usr	tellwait.c	/^static void sig_usr(int signo)	\/* one signal hand/
signal_setup	signal.c	/^void signal_setup(void)$/
socket_accept	socket.c	/^socket_t socket_accept(socket_t s, struct sockaddr/
socket_close	socket.c	/^void socket_close(DESC_DATA *d)$/
socket_dontroute	socket.c	/^void socket_dontroute(socket_t s)$/
socket_init	socket.c	/^int socket_init(int port)$/
socket_lingeroff	socket.c	/^void socket_lingeroff(socket_t s)$/
socket_nonblock	socket.c	/^void socket_nonblock(socket_t s)$/
socket_rcvbuf	socket.c	/^void socket_rcvbuf(socket_t s, unsigned int opt)$/
socket_reuse	socket.c	/^void socket_reuse(socket_t s)$/
socket_sndbuf	socket.c	/^void socket_sndbuf(socket_t s, unsigned int opt)$/
socket_timeout	socket.c	/^\/\/ sec : seconds, usec : microseconds$/
socket_write_tcp	socket.c	/^int socket_write_tcp(socket_t desc, const char *tx/
sql_account_query	sql.c	/^int sql_account_query(const char *buf)$/
sql_affected_rows	libsql.c	/^int sql_affected_rows(SQL * sql)$/
sql_async_loop	libsql.c	/^void sql_async_loop(SQL * sql)$/
sql_async_query	libsql.c	/^int sql_async_query(SQL * sql, const char *buf)$/
sql_async_start	libsql.c	/^int sql_async_start(SQL * sql)$/
sql_clone	libsql.c	/^SQL * sql_clone(SQL * sql)$/
sql_create	libsql.c	/^SQL * sql_create(const char *addr, const char *use/
sql_deinit	sql.c	/^void sql_deinit()$/
sql_destroy	libsql.c	/^void sql_destroy(SQL ** r_sql)$/
sql_fetch_row	libsql.c	/^MYSQL_ROW sql_fetch_row(MYSQL_RES * res)$/
sql_free_result	libsql.c	/^void sql_free_result(MYSQL_RES * res)$/
sql_init	sql.c	/^int sql_init()$/
sql_num_rows	libsql.c	/^int sql_num_rows(MYSQL_RES * res)$/
sql_ping	sql.c	/^void sql_ping()$/
sql_query	libsql.c	/^int sql_query(SQL * sql, const char *buf)$/
sql_result	libsql.c	/^MYSQL_RES * sql_result(SQL * sql)$/
sql_string	libsql.c	/^char *sql_string(SQL * sql, char *buf)$/
str_dup	utils.c	/^char *str_dup(const char *source)$/
sys_log	log.c	/^void sys_log(const char *format, ...)$/
sys_log_header	log.c	/^void sys_log_header(const char *header)$/
time_str	utils.c	/^char *time_str(time_t ct)$/
timeadd	utils.c	/^struct timeval *timeadd(struct timeval *a, struct /
timediff	utils.c	/^struct timeval *timediff(struct timeval *a, struct/
tm_calc	utils.c	/^struct tm *tm_calc(const struct tm *curr_tm, int d/
valid_host	socket.c	/^int valid_host(const char *host)$/
valid_ip	socket.c	/^	static struct valid_ip$/
write_to_descriptor	socket.c	/^int write_to_descriptor(socket_t desc, const char /
write_to_q	socket.c	/^void write_to_q(char *data, struct data_q *dest, i/
